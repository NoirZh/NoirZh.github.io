<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一共十七划</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-11T08:49:46.752Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Noir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A=B 第三章题解</title>
    <link href="http://example.com/2023/11/09/%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://example.com/2023/11/09/%E7%AC%AC%E4%B8%89%E7%AB%A0/</id>
    <published>2023-11-09T15:04:20.000Z</published>
    <updated>2023-11-11T08:49:46.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个关键字相当于在找到特定的子字符串之后,删去该子字符串,并且将我们指定的新字符串插入到原字符串的开头与结尾</p><p>类似于正则表达式的^与$的应用</p><p>很像是我们在第二章的操作:将字母压之后换成其他字母往后排以使得压缩持续进行</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="3-1-去除"><a href="#3-1-去除" class="headerlink" title="3-1 去除"></a>3-1 去除</h2><p>相当简单的教程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(start)a=</span><br><span class="line">(end)a=</span><br></pre></td></tr></table></figure><h2 id="3-2-旋转"><a href="#3-2-旋转" class="headerlink" title="3-2 旋转"></a>3-2 旋转</h2><p>这里只针对前面不是a进行操作,可以保证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(start)b=(end)b</span><br><span class="line">(start)c=(end)c</span><br></pre></td></tr></table></figure><h2 id="3-3-A到B-2"><a href="#3-3-A到B-2" class="headerlink" title="3-3 A到B 2"></a>3-3 A到B 2</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>开始上难度了,但是其实不难,我们只需要先把所有特定位置的a变成特殊的,然后再处理另一边的特殊的即可</p><p>就像是我们之前做过的一样,此时的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(start)a=x</span><br><span class="line">xa=ax</span><br><span class="line">(end)a=z</span><br><span class="line">az=za</span><br><span class="line">x=b</span><br><span class="line">z=b</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>我们很容易注意到我们的xa&#x3D;ax或者之类的操作只是把所有符合要求的串找出来,保证不阻塞生成</p><p>于是我们注意到移到另一边的位置显然更好(指行数更小),更新之后如下</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(start)a=(end)x</span><br><span class="line">(end)x=(start)b</span><br><span class="line">(end)a=(start)x</span><br><span class="line">(start)x=(end)b</span><br></pre></td></tr></table></figure><h2 id="3-5-首尾"><a href="#3-5-首尾" class="headerlink" title="3-5 首尾"></a>3-5 首尾</h2><p>通过上一题我们就知道弄到尾部直接判断即可</p><p>我们唯一要注意的就是判断在前,不然容易出死循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ax=(return)true #有任意一个就是真的,能迅速检查到</span><br><span class="line">by=(return)true</span><br><span class="line">cz=(return)true</span><br><span class="line"></span><br><span class="line">#以下的操作会1.在有相同的时候把除了最后一个字母之外都换成其他字母插入到后面 2.没有相同的时候所有都插入到后面</span><br><span class="line">(start)a=(end)x</span><br><span class="line">(start)b=(end)y</span><br><span class="line">(start)c=(end)z</span><br><span class="line">=(return)false</span><br></pre></td></tr></table></figure><h2 id="3-6-最多-2"><a href="#3-6-最多-2" class="headerlink" title="3-6 最多 2"></a>3-6 最多 2</h2><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>与之前的类似,但是我们需要保留所有作比较的字母来保证恢复,然后这里其实就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab</span><br><span class="line">ab=(end)x</span><br><span class="line">cx=(end)y #y代表abc,可随时换成最多的 #剩下ac和bc</span><br><span class="line">#之后我们不用关心y具体是什么,只要二者消耗,剩下的那个做全员回复就行</span><br><span class="line"></span><br><span class="line">ac=(end)y</span><br><span class="line">bc=(end)y</span><br><span class="line">#做一个穷举</span><br><span class="line">ax=aa</span><br><span class="line">cy=cc</span><br><span class="line">by=bb</span><br><span class="line">ay=aa</span><br><span class="line">bx=bb</span><br></pre></td></tr></table></figure><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>发现ax,ay的行为是相同的,bx,by也是,优化以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab</span><br><span class="line">ab=(end)x</span><br><span class="line">cx=(end)y #y代表abc,可随时换成最多的</span><br><span class="line">#acy bcy ay by cy </span><br><span class="line"></span><br><span class="line">ac=(end)y</span><br><span class="line">bc=(end)y</span><br><span class="line">x=y</span><br><span class="line">cy=cc</span><br><span class="line">by=bb</span><br><span class="line">ay=a</span><br></pre></td></tr></table></figure><h2 id="3-7回文串"><a href="#3-7回文串" class="headerlink" title="3-7回文串"></a>3-7回文串</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>判断是不是消除之后全空即可,如3-5的加强版,我们进行全局替换,然后穷举非空情况,但是注意我们不用考虑剩下来的单个字母的情况,因为那种情况也属于回文串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cz=</span><br><span class="line">by=</span><br><span class="line">ax=</span><br><span class="line">(start)a=(end)x</span><br><span class="line">(start)b=(end)y</span><br><span class="line">(start)c=(end)z</span><br><span class="line">xy=(<span class="keyword">return</span>)false</span><br><span class="line">xz=(<span class="keyword">return</span>)false</span><br><span class="line">yx=(<span class="keyword">return</span>)false</span><br><span class="line">yz=(<span class="keyword">return</span>)false</span><br><span class="line">zx=(<span class="keyword">return</span>)false</span><br><span class="line">zy=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h3 id="挑战优化"><a href="#挑战优化" class="headerlink" title="挑战优化"></a>挑战优化</h3><p>注意到我们六行代码目的都只是为了判断是否有两个字母及以上存在</p><p>修改字符串使之存在首尾标识符即可,也就是说能保证显示出来两个字母不同且存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cuZn=</span><br><span class="line">buYn=</span><br><span class="line">auXn=</span><br><span class="line">(start)a=(end)uXn</span><br><span class="line">(start)b=(end)uYn #不影响排空</span><br><span class="line">(start)c=(end)uZn</span><br><span class="line">nu=(return)false  #出现这个说明仍有多个字母存在,整个字符串非空,</span><br><span class="line">=(return)true</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个关键字相当于在找到特定的子字符串之后,删去该子字符串,并且将我们指定的新字符串插入到原字符串的开头与结尾&lt;/p&gt;
&lt;p&gt;类似于正则表达式</summary>
      
    
    
    
    
    <category term="A=B" scheme="http://example.com/tags/A-B/"/>
    
  </entry>
  
  <entry>
    <title>A=B 第二章题解</title>
    <link href="http://example.com/2023/11/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://example.com/2023/11/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2023-11-07T07:24:50.000Z</published>
    <updated>2023-11-11T08:48:45.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们要好好理解一下a&#x3D;(return)b干了啥:</p><ol><li>找到匹配的字符串a</li><li>将整个我们的字符串变成b</li><li>中断循环,看结果</li></ol><p>换成函数表达就是 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> s:</span><br><span class="line">s=b</span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>之后判题的只能看到你返回的字符串b</p><h2 id="2-1-你好世界"><a href="#2-1-你好世界" class="headerlink" title="2.1 你好世界"></a>2.1 你好世界</h2><p>这里给出来了一个提示,在我们用空等的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=(<span class="keyword">return</span>)helloworld</span><br></pre></td></tr></table></figure><h2 id="2-2-AAA"><a href="#2-2-AAA" class="headerlink" title="2.2 AAA"></a>2.2 AAA</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们需要看a的数量,也就是说我们不用管b,c,将二者全消除之后剩下的就是a,再看其是否大于等于3个即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b=</span><br><span class="line">c=</span><br><span class="line">aaa=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false </span><br></pre></td></tr></table></figure><h2 id="2-3-恰好三个"><a href="#2-3-恰好三个" class="headerlink" title="2.3 恰好三个"></a>2.3 恰好三个</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>不用管到底是哪个字符,我们只需要验证是不是三个字符即可,所以先把所有字符变成一样的,例如c</p><p>接下来我们要判断的不是<code>ccc=(return)true</code>,因为字符串<code>cccc</code>同样包含<code>ccc</code>,</p><ul><li>我们首先就排除掉大于3个字符的,其一定包含四个及以上的字符串</li><li>这时候对只有三个字符的返回true</li><li>剩下的也是false</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=c</span><br><span class="line">b=c</span><br><span class="line">cccc=(<span class="keyword">return</span>)false </span><br><span class="line">ccc=(<span class="keyword">return</span>)true  </span><br><span class="line">=(<span class="keyword">return</span>)false</span><br></pre></td></tr></table></figure><h2 id="2-4-余数"><a href="#2-4-余数" class="headerlink" title="2.4 余数"></a>2.4 余数</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这个是return使用的一个示例,所以我们考虑的仍然是只关心字符串长度,不关心内容</p><ol><li>将所有都替换成同样的字符</li><li>发现求的事余3,我们只需要每次都将三个字符的串放空,剩下的字符串长度就是总长度余3的结果</li><li>将长度换成数字</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>这个思路在后续也有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=c</span><br><span class="line">b=c </span><br><span class="line">ccc=           </span><br><span class="line">cc=(<span class="keyword">return</span>)<span class="number">2</span></span><br><span class="line">c=(<span class="keyword">return</span>)<span class="number">1</span></span><br><span class="line">=(<span class="keyword">return</span>)<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="2-5-奇数"><a href="#2-5-奇数" class="headerlink" title="2.5 奇数"></a>2.5 奇数</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h4 id="划分问题"><a href="#划分问题" class="headerlink" title="划分问题"></a>划分问题</h4><p>终于开始上难度了,但是这个 思想其实不难理解,我们先做一个简单的想法,我如何判断一长串a是否由奇数组成?</p><ol><li>考虑到字符串长度为1&lt;&#x3D;n&lt;&#x3D;7,很容易知道0,1,3,5,7为可能的长度</li><li>暴力枚举虽好,但是长度有点太大了,我们可以用另一个方法:奇数减去2之后仍然为奇数</li><li>所以我们很容易想到<code>aaa=a</code>来清理串,为什么不能是<code>aa=</code>?<ol><li>因为这样没有办法确认是刚开始就没有a,还是被偶数a消除掉的</li></ol></li><li>此时长度0,1,2,只有2表示原串是偶数</li></ol><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>然后我们知道要去做什么了:把三个字符串相同的集中在一起,相当于按顺序再为这三个字符轮流做上述检查操作</p><p>所以需要排序,让相同字符待在一起</p><p>接下来问题就好解决了</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">aaa=a</span><br><span class="line">bbb=b</span><br><span class="line">ccc=c</span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">bb=(<span class="keyword">return</span>)false</span><br><span class="line">cc=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>你肯定要回来看的,如果你看不懂2.6的话</p><p>发现了什么?我们将同样的情况循环了3遍,也就是说,在单独讨论的时候a,b,c其实是等价的,有没有什么办法将它们的等价用代码解释出来?</p><p>一个很有趣的想法是将b,c转换成等价a,最后判断三段a是否都满足奇数</p><p>一点点魔法:设置一个障碍,让所有相邻相同的字母没有障碍,而让不同的字母之间有障碍</p><p>考虑如下代码的运作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br></pre></td></tr></table></figure><p>这种情况下会发生什么:相邻的b变成了中间隔着3个x的a,不同字母之间隔着2个x</p><p>更加显式地能看到假设 bacacc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aabccc</span><br><span class="line">-&gt; aaxxaxxxaxxxaxxxaxx</span><br><span class="line">-&gt; a|a| xxax |xaxx|xaxx|xaxx</span><br></pre></td></tr></table></figure><p>仔细观察,发现相隔3个x的都能去掉!,此时会变成用两个x阻隔的三个段,每个段里面的a的个数是a或b或c的个数,此时<code>bacacc</code>变成<code>aaxxaxxaaaxx</code></p><p>然后判断即可</p><p>得出来新的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br><span class="line">xxx=</span><br><span class="line">aaa=a <span class="comment">#等价处理</span></span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><p>这种等价思想很重要,在之后会多次使用</p><p>其实这种等价想法在于什么:在于让相同字母之间的间隔一样,不同字母的间隔不一样,以这种思路你完全可以设计如下方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中()表示重复几次</span></span><br><span class="line">b=x(n)ax(m)</span><br><span class="line"><span class="comment">#则c和b之间的距离也应为n,b和b之间距离为m+n</span></span><br><span class="line"><span class="comment">#所以</span></span><br><span class="line">c=x(n-m)ax(2m)</span><br><span class="line"><span class="comment">#符合以上要求的都可以替换</span></span><br><span class="line"><span class="comment">#比如以下代码n=6,m=3,一样可以通过</span></span><br><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxxxxxaxxx</span><br><span class="line">c=xxxaxxxxxx</span><br><span class="line">xxxxxxxxx=</span><br><span class="line">aaa=a</span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h2 id="2-6-独一无二"><a href="#2-6-独一无二" class="headerlink" title="2.6 独一无二"></a>2.6 独一无二</h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>这里建议先看一下上面的拓展</p><p>然后我们先翻译一下题目:希望这个长字符串出现的单字符字符串有且只有一个:</p><ul><li>aaabccc:只有一个a,是我们需要的</li><li>aaabacc:b和a都有,是错误的</li><li>实际上我们要做的是在<code>aaa=aa;bbb=bb;ccc=cc</code>之后,看单个的不成对字母有几个</li></ul><p>我们只需要知道是不是等于1</p><p>和上题拓展法类似,我们等价之后再做类似操作,现在得出来的因为没有排序,我们现在能保证的是</p><ol><li>相同字母之间x个数为0或者3</li><li>不同字母之间x个数为1或者2</li></ol><p>由上述两条我们将串收敛一下,把相等相邻的聚在一块,然后格式一下彼此之间距离</p><p>此时出现的就是<code>axaaaxaaxa</code>之类的东西,更进一步地,我们将所有长串都收成空串</p><p>此时我们要找的是此时里面是不是只有一个a</p><p>看到a就return肯定不行,但是我们能先把多个a存在的删掉,其格式一定为<code>axaxa</code>之类,因为我们上述操作不相同的单字符串串之间一定有一个x阻隔</p><p>这时候就有只剩下a的情况了,此时是我们想要的</p><p>剩下的情况就是全是长串,也是我们不想要的</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br><span class="line">xxx= <span class="comment">#这之后相邻的同字符的串就是相邻的a</span></span><br><span class="line">xx=x <span class="comment">#此时不同串之间相差1x</span></span><br><span class="line">aaa=aa </span><br><span class="line">aa= <span class="comment">#两步除长串</span></span><br><span class="line">axa=(<span class="keyword">return</span>)false</span><br><span class="line">a=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false</span><br></pre></td></tr></table></figure><h2 id="2-7上升"><a href="#2-7上升" class="headerlink" title="2.7上升"></a>2.7上升</h2><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>排序</p><ol><li>做之后还会有效的两两对比</li><li>先确定是不是c比d多,再确定是不是b比a多</li><li>建议先看下面的两个</li></ol><h3 id="实现上面的体现"><a href="#实现上面的体现" class="headerlink" title="实现上面的体现"></a>实现上面的体现</h3><ol><li>c比b多则b全部化为d,此时还有c剩余</li><li>d比a多则a全消失,d还有剩余</li><li>也就是说dc存在的时候其实是(bcc)还有剩,合法性足够强</li><li>我或许需要一些更加显然的理解,但是现在没有…以后可能试试</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line">bc=d   <span class="comment">#合法情况是adc</span></span><br><span class="line">bd=db  <span class="comment">#此时d代表的是bc</span></span><br><span class="line">ad=    <span class="comment">#消去abc 此时如果合法一定是dc</span></span><br><span class="line">dc=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false <span class="comment">#其他就都不合法</span></span><br></pre></td></tr></table></figure><h2 id="2-8最多"><a href="#2-8最多" class="headerlink" title="2.8最多"></a>2.8最多</h2><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ol><li>对于这种考虑总体字母的,我们先把他们放在一起,先排序</li><li>我们考虑到排序,所以我们只要比较三者的多少,很明显能考虑到两两对比</li><li>接下来我们最好看代码讲解</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line"></span><br><span class="line">bc=d    </span><br><span class="line">bd=db  <span class="comment">#此时d代表的是bc</span></span><br><span class="line">ad=    <span class="comment">#消去abc,接下来剩下的就只有一个或两个字母,一定,而且不是bc,把三种组合罗列一下就是结果,只有一个字母显然是答案</span></span><br><span class="line">ac=</span><br><span class="line">ab=</span><br><span class="line"></span><br><span class="line">a=(<span class="keyword">return</span>)a</span><br><span class="line">b=(<span class="keyword">return</span>)b</span><br><span class="line">c=(<span class="keyword">return</span>)c</span><br></pre></td></tr></table></figure><h2 id="2-9最少"><a href="#2-9最少" class="headerlink" title="2.9最少"></a>2.9最少</h2><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>思路与上面的类似</p><p>直接看代码吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line"></span><br><span class="line">ab=d</span><br><span class="line">db=bd</span><br><span class="line">dc=  <span class="comment">#销去了abc,可能剩下ad,ac,bc</span></span><br><span class="line"> </span><br><span class="line">d=(<span class="keyword">return</span>)c <span class="comment">#d存在说明d比c多,也就是ab组合都比c多</span></span><br><span class="line">ac=(<span class="keyword">return</span>)b </span><br><span class="line">bc=(<span class="keyword">return</span>)a</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们要好好理解一下a&amp;#x3D;(return)b干了啥:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到匹配的字符串a&lt;/li&gt;
&lt;li&gt;将整个我们的字符</summary>
      
    
    
    
    
    <category term="A=B" scheme="http://example.com/tags/A-B/"/>
    
  </entry>
  
  <entry>
    <title>A=B 第一章题解</title>
    <link href="http://example.com/2023/11/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>http://example.com/2023/11/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2023-11-01T13:04:50.000Z</published>
    <updated>2023-11-11T08:49:05.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>A&#x3D;B语言也较为特殊,可以认为整体是个循环体,但是是每次循环只要能够执行一条命令就去执行,然后就重新回到循环开头</p><p>这个性质会在后续不断应用</p><p>而且其本质在做的就是字符串替换</p><h2 id="1-1-A到B"><a href="#1-1-A到B" class="headerlink" title="1.1 A到B"></a>1.1 A到B</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=b</span><br></pre></td></tr></table></figure><h2 id="1-2-大写"><a href="#1-2-大写" class="headerlink" title="1.2 大写"></a>1.2 大写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=A</span><br><span class="line">b=B</span><br><span class="line">c=C</span><br></pre></td></tr></table></figure><h2 id="1-3-去重"><a href="#1-3-去重" class="headerlink" title="1.3 去重"></a>1.3 去重</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>显然我们最后要保留的状态是没有连续字母</p><p>只需要将重复的几个压成一个就行,不过要注意A&#x3D;B这个语言的特殊性</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aa=a</span><br><span class="line">bb=b</span><br><span class="line">cc=c</span><br></pre></td></tr></table></figure><h2 id="1-4-去重-2"><a href="#1-4-去重-2" class="headerlink" title="1.4 去重 2"></a>1.4 去重 2</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同理,这个是把连续的a压没,</p><p>这里之所以会有aaa,而不是直接<code>aa=</code>是因为假如只压缩的可能会剩下来:例如<code>aaa</code>会被替换成<code>a</code></p><p>,我们这么做的本质是将多的字母先压成两个,再把这两个消除掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa=aa</span><br><span class="line">aa=</span><br></pre></td></tr></table></figure><h2 id="1-5-排序"><a href="#1-5-排序" class="headerlink" title="1.5 排序"></a>1.5 排序</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>研究语言的必经之路,排序,注意到我们现在在做的是替换字符串</p><p>我们的目的是希望各个字母都在其应该在的位置,但我们不知道数组下标,怎么样能达成这两个条件呢?</p><p>我们需要一个只看相邻的排序算法,也就是冒泡算法,实现起来不难,如下</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>看到了吗,本质就是大的向后挪动,这个在单步运行时候看的更清楚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br></pre></td></tr></table></figure><p>这个排序在之后会常用到的,当我们只关心字母数量之类的而不关心其位置的时候</p><h2 id="1-6-比较"><a href="#1-6-比较" class="headerlink" title="1.6 比较"></a>1.6 比较</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>比较a和b的多少,还记得去重怎么做的吗?把两个相同的数摁在一起消除</p><p>这个题也一样,我们把两个不同的字母摁在一起消除,剩下的就是多的字母</p><p>值得一提的是压字母存在两个情况</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab=</span><br><span class="line">ba=</span><br><span class="line">aa=a</span><br><span class="line">bb=b</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;A&amp;#x3D;B语言也较为特殊,可以认为整体是个循环体,但是是每次循环只要能够执行一条命令就去执行,然后就重新回到循环开头&lt;/p&gt;
&lt;p&gt;这</summary>
      
    
    
    
    
    <category term="A=B" scheme="http://example.com/tags/A-B/"/>
    
  </entry>
  
  <entry>
    <title>software</title>
    <link href="http://example.com/2023/07/01/a_translation/"/>
    <id>http://example.com/2023/07/01/a_translation/</id>
    <published>2023-07-01T07:24:50.000Z</published>
    <updated>2023-11-11T08:21:49.715Z</updated>
    
    <content type="html"><![CDATA[<ul><li>软件寿命周期模型</li><li>结构化和面向对象的建模方法，软件需求分析，软件设计测试，软件维护等</li><li>课时安排<ul><li>工程基础3</li><li>需求分析8</li><li>软件设计10</li><li>实现及测试8</li><li>维护及管理3</li><li>大作业16</li></ul></li><li>重点及难点<ul><li>重点<ul><li>软件生命周期模型</li><li>软件需求分析方法</li><li>软件设计方法</li><li>软件测试</li></ul></li><li>难点<ul><li>以UML为基础的面向对象建模方法</li><li>数据流图方法</li><li>黑盒及白盒测试方法4</li></ul></li></ul></li></ul><h2 id="软件工程绪论"><a href="#软件工程绪论" class="headerlink" title="软件工程绪论"></a>软件工程绪论</h2><h3 id="计算机软件"><a href="#计算机软件" class="headerlink" title="计算机软件"></a>计算机软件</h3><ul><li><p>什么是软件</p><ul><li><p>IEEE对于软件的定义：软件是计算机程序，规程及运行计算机系统所需要的文档和数据</p></li><li><p>Wirth指出</p><ul><li>在结构化程序设计中程序&#x3D;算法+数据结构</li><li>在软件工程里，软件&#x3D;程序+文档</li></ul></li><li><p>另一种对软件的公认解释是</p><ul><li>软件是包括程序，数据及相关文档的完整集合</li></ul></li><li><p>程序和数据是构造软件的基础，文档是软件质量的保证，也是保证软件更新及生命周期长短的</p></li></ul></li><li><p>软件的特点</p><ul><li>软件是一种逻辑实体，具有抽象性</li><li>软件开发过程中并没有明显的制造过程，应该理解为“创作”</li><li>不存在机械磨损和老化问题，但是存在软件退化的问题</li><li>软件开发和运行受到计算机系统的约束和限制</li><li><strong>直到目前未知软件开发仍未摆脱手工艺的开发方式</strong></li><li>软件是复杂的原因<ul><li>实际需求（业务背景）的复杂性</li><li>程序逻辑的复杂性</li></ul></li><li>软件研制成本高，软件成本所占的比例逐年升高</li><li>软件投入使用时候涉及到许多社会因素</li></ul></li><li><p>软件的分类</p><ul><li>根据服务对象的范围<ul><li>通用软件：操作系统，数据库</li><li>定制软件：企业ERP，办公自动化系统</li></ul></li><li>根据软件完成功能所处的层次不同<ul><li>应用软件</li><li>中间层软件</li><li>系统软件</li></ul></li></ul></li></ul><h3 id="软件发展和软件危机"><a href="#软件发展和软件危机" class="headerlink" title="软件发展和软件危机"></a>软件发展和软件危机</h3><ul><li>软件发展阶段<ul><li>二十世纪五六十年代：使用者与开发者通常是同一个人，</li><li>二十世纪六七十年代开始了程序系统阶段</li><li>二十世纪七十到九十年代，开始软件工程阶段</li></ul></li><li>软件危机<ul><li>1960-1970年的软件快速发展阶段</li></ul></li><li>软件危机的解决：<ul><li>1968年软件工程大会第一次召开</li></ul></li><li>软件危机<ul><li>背景：二十世纪六十年代后，随着计算机软件应用领域增多，软件规模不断扩大，软件系统红能多，逻辑复杂，不断扩充，从而导致许多系统开发出现了不同后果<ul><li>系统存在大量错误，可用性和可靠性差</li><li>系统无法增加新功能，南与维护</li><li>系统无法按照计划时间完成</li><li>系统无法按照计划时间完成</li><li>导致很多软件系统彻底失效</li></ul></li><li>所谓软件危机就是计算机软件在开发和维护过程中遇到的一系列严重问题，导致了软件行业的信任危机，具体表现在<ul><li>软件开发成本难以估算，无法指定合理的开发计划</li><li>用户的需求无法确切表达</li><li>软件质量存在问题</li><li>软件的可维护性差</li><li>缺乏文档资料</li></ul></li><li>产生原因<ul><li>软件系统复杂性</li><li>软件开发的方法和技术不合理不成熟</li></ul></li><li>软件工程方法<ul><li>1968年<code>Friedrich Ludwig Bauer</code>提出运用工程化原则和方法，组织软件开发解决软件危机，并提出软件工程</li></ul></li></ul></li></ul><h3 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h3><ul><li>软件工程的定义：<ul><li><code>Fritz Bauer</code>提出软件工程的概念：软件工程师为了经济地获得能够在十几机器上高效运行的可靠软件而建立和使用的一系列好的工程化原则</li><li><code>Barry Boehm</code>软件工程定义：运用现代科学技术只是来设计并构建计算机程序及未开发，运行和维护这些程序所必须的相关文件资料</li><li>‘Richard E Fairley’认为软件工程学是为了在成本限额以内暗示完成开发和修改软件产品所需要的系统生产和维护的技术和管理的学科</li><li>IEEE计算机学会将软件工程定义为：<ol><li>应用系统化的，规范化的，定量的方法来开发、运行、和维护软件，既将工程应用到软件</li><li>对1中的各种方法的研究</li></ol></li></ul></li><li>软件工程三要素：<ol><li>方法：提供了如何做的技术</li><li>工具：提供了自动或半自动的软件支撑环境</li><li>过程：将软件洪城的方法和工具综合起来已达到合理，及时地进行计算机软件开发的目的</li></ol></li><li>软件工程的目标和原则<ul><li>目标：生产具有正确性，可用性和开销适宜的软件产品</li><li>最终目的：摆脱手工产业的方法</li></ul></li></ul><h3 id="软件工程知识体系"><a href="#软件工程知识体系" class="headerlink" title="软件工程知识体系"></a>软件工程知识体系</h3><ul><li><p>软件工程知识体系指南简介</p><ul><li><code>SWEBOK</code>是IEEE主持的一个项目，其目的有五点<ul><li>促进世界范围内对软件工程的一致观点</li><li>阐明软件工程相对其他学科的关系，并划分边界</li><li>刻画软件工程学科的内容</li><li>提供实用知识体系的主题</li><li>设立课程表，行业认证等</li></ul></li></ul></li><li><p>软件工程知识体系知识域</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;软件寿命周期模型&lt;/li&gt;
&lt;li&gt;结构化和面向对象的建模方法，软件需求分析，软件设计测试，软件维护等&lt;/li&gt;
&lt;li&gt;课时安排&lt;ul&gt;
&lt;li&gt;工程基础3&lt;/li&gt;
&lt;li&gt;需求分析8&lt;/li&gt;
&lt;li&gt;软件设计10&lt;/li&gt;
&lt;li&gt;实现及测试8&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="test" scheme="http://example.com/tags/test/"/>
    
  </entry>
  
</feed>
