<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一共十七划</title>
  
  <subtitle>Noir</subtitle>
  <link href="https://noirzh.github.io/atom.xml" rel="self"/>
  
  <link href="https://noirzh.github.io/"/>
  <updated>2023-11-12T01:35:13.695Z</updated>
  <id>https://noirzh.github.io/</id>
  
  <author>
    <name>Noir</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown排版效果</title>
    <link href="https://noirzh.github.io/2023/11/11/My-New-Post/"/>
    <id>https://noirzh.github.io/2023/11/11/My-New-Post/</id>
    <published>2023-11-11T07:24:50.000Z</published>
    <updated>2023-11-12T01:35:13.695Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.imooc.com/wiki/markdownlesson">来自这里</a></p><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><p><code>typora</code>能够实时渲染,所以记得开源代码显示器</p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>这个我不用多说吧</p><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>除了这个回车之外</p><p>还有这个 <br>换行或者<code>shift+entet</code>我<br>我</p><p>我</p><h2 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h2><p>以下代码能够实现换行,大概,放在最后一行</p><style>p{text-indent:2em}</style><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><p>这样或者</p><hr><p>这样</p><h2 id="项"><a href="#项" class="headerlink" title="项"></a>项</h2><ul><li>无序项<ul><li>及其连环套</li></ul></li><li>简单吧</li></ul><ol><li>有序<ol><li>同理</li></ol></li><li>项</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>引用</p><blockquote><p>和交叉引用</p></blockquote><blockquote><blockquote><p>很简单</p></blockquote></blockquote><blockquote><p>对吧</p></blockquote><p>层数</p></blockquote><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>包括<strong>加粗</strong>和<em>斜体</em>甚至可以<em><strong>这样</strong></em></p><h2 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h2><p><del>删除</del>和<ins>下划线</ins></p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h4 id="使用-标签的修改字体"><a href="#使用-标签的修改字体" class="headerlink" title="使用 &lt;font&gt; 标签的修改字体"></a>使用 <code>&lt;font&gt;</code> 标签的修改字体</h4><p>这里是默认字体</p><p><font face="HEI">这里是黑体</font></p><p><font face="KAI">这里是楷体</font></p><p><font face="GB18030 Bitmap">这里是扩展字体</font></p><style>p {font-size: 2rem;}</style><h4 id="使用-标签的修改字号"><a href="#使用-标签的修改字号" class="headerlink" title="使用 &lt;font&gt; 标签的修改字号"></a>使用 <code>&lt;font&gt;</code> 标签的修改字号</h4><p>这里是默认正文字号</p><p><font size="1">1号字 最小</font></p><p><font size="2">2号字</font></p><p><font size="3">3号字 默认</font></p><p><font size="4">4号字</font></p><p><font size="5">5号字</font></p><p><font size="6">6号字</font></p><p><font size="7">7号字 最大</font></p><h2 id="前景色和背景色"><a href="#前景色和背景色" class="headerlink" title="前景色和背景色"></a>前景色和背景色</h2><h4 id="使用-的标签的修改文字前景色"><a href="#使用-的标签的修改文字前景色" class="headerlink" title="使用 &lt;font&gt; 的标签的修改文字前景色"></a>使用 <code>&lt;font&gt;</code> 的标签的修改文字前景色</h4><p><font color="red">红色</font><br><font color="green">绿色</font><br><font color="blue">蓝色</font></p><p><font color="rgb(200, 100, 100)">使用 rgb 颜色值</font></p><p><font color="#FF00BB">使用十六进制颜色值</font></p><h4 id="使用-style-属性修改文字的背景色"><a href="#使用-style-属性修改文字的背景色" class="headerlink" title="使用 style 属性修改文字的背景色"></a>使用 <code>style</code> 属性修改文字的背景色</h4><p><font style="background: red">红色</font><br><font style="background: green">绿色</font><br><font style="background: blue">蓝色</font></p><p><font style="background: rgb(200,100,100)">使用 rgb 颜色值</font></p><p><font style="background: #FF00BB">使用十六进制颜色值</font></p><h4 id="更丰富背景样式"><a href="#更丰富背景样式" class="headerlink" title="更丰富背景样式"></a>更丰富背景样式</h4><h2 id="I-wish-you-a-Merry-Christmas"><a href="#I-wish-you-a-Merry-Christmas" class="headerlink" title="I wish you a Merry Christmas"></a><font style="background: ('E:.jpg') ">I wish you a Merry Christmas</font></h2><p>使用图片作背景</p><h2 id="太阳太阳，给我们带来，七色光彩"><a href="#太阳太阳，给我们带来，七色光彩" class="headerlink" title="太阳太阳，给我们带来，七色光彩"></a><font style="background: linear-gradient( to right, #ff1616, #ff7716, #ffdc16, #36c945, #10a5ce, #0f0096, #a51eff, #ff1616);">太阳太阳，给我们带来，七色光彩</font></h2><p>渐变背景色</p><h2 id="行内代码和代码块"><a href="#行内代码和代码块" class="headerlink" title="行内代码和代码块"></a>行内代码和代码块</h2><h4 id="定义行内代码"><a href="#定义行内代码" class="headerlink" title="定义行内代码"></a>定义行内代码</h4><p>行内的 html 代码：<code>&lt;head&gt;&lt;title&gt;网页标题&lt;/title&gt;&lt;/head&gt;</code></p><p>行内的 json 代码：<code>var json = &#123;key: value&#125;;</code></p><h4 id="使用反引号定义代码块"><a href="#使用反引号定义代码块" class="headerlink" title="使用反引号定义代码块"></a>使用反引号定义代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pubic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h4 id="声明超链接"><a href="#声明超链接" class="headerlink" title="声明超链接"></a>声明超链接</h4><p>一对中括号就可以将文字转换为超链接，如: <a href="">北京</a>，<a href="">上海</a>，<a href="">广州</a>，<a href="">深圳</a></p><h4 id="声明超链接的细节"><a href="#声明超链接的细节" class="headerlink" title="声明超链接的细节"></a>声明超链接的细节</h4><h4 id="声明超链接的细节-1"><a href="#声明超链接的细节-1" class="headerlink" title="声明超链接的细节"></a>声明超链接的细节</h4><p><a href="http://www.tiantanpark.com/">天坛</a>公园，是明清两代皇帝每年祭天和祈祷五谷丰收的地方。<a href="http://www.tiantanpark.com/">天坛</a>以严谨的建筑布局、奇特的建筑构造和瑰丽的建筑装饰著称于世。</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h4 id="使用全局声明方式插入图片"><a href="#使用全局声明方式插入图片" class="headerlink" title="使用全局声明方式插入图片"></a>使用全局声明方式插入图片</h4><p><img src="/images/CG_61.png"><br>![][img2]<br><img src="/images/CG_61.png"><br>![][img2]</p><style>  img {    border-radius: 50% !important;    border: 30px solid #eee;  }</style><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>此时很多东西就需要有相应插件了,自己查看</p><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>在 Markdown 文件中，在 “ 无序列表 <code>-,+,*</code> “ 后面使用 <code>「中括号 []」</code> 声明复选框。在中括号中写入 <code>x</code> ，便可实现选中效果。</p><p>就像是</p><h4 id="复选框-checkbox"><a href="#复选框-checkbox" class="headerlink" title="复选框 checkbox"></a>复选框 checkbox</h4><ul><li><input disabled="" type="checkbox"> Java</li><li><input checked="" disabled="" type="checkbox"> Php</li></ul><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><h4 id="在文档中使用特殊字符"><a href="#在文档中使用特殊字符" class="headerlink" title="在文档中使用特殊字符"></a>在文档中使用特殊字符</h4><p>如果不使用转义字符，以下算式将不能按预期输出<br>2<em>3</em>4&#x3D;24<br>以上算式的正确写法为：<br>2*3*4&#x3D;24  </p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h4 id="基于-HTML-样式"><a href="#基于-HTML-样式" class="headerlink" title="基于 HTML 样式"></a>基于 HTML 样式</h4><div style="display:none">这是一段被注释掉的文字</div><!--是的--><p>这是一段没有被注释的文字</p><h4 id="通过-Markdown-解析达到注释效果"><a href="#通过-Markdown-解析达到注释效果" class="headerlink" title="通过 Markdown 解析达到注释效果"></a>通过 Markdown 解析达到注释效果</h4><p>这是一段没有被注释的文字</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 表格包含三个部分：表头、分割线、数据。</p><ul><li><strong>表头</strong> 用来对列名对象进行描述，也就是通常所说的列名；</li><li><strong>数据</strong> 用来展示每行的具体内容，数据是表格的核心；</li><li><strong>分割线</strong> 用来区分表头和数据，也是 Markdown 中表格定义的最基本语法要求。</li></ul><h4 id="表格内容的对齐"><a href="#表格内容的对齐" class="headerlink" title="表格内容的对齐"></a>表格内容的对齐</h4><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">张三</td><td align="right">17岁</td></tr><tr><td align="left">2</td><td align="center">李四</td><td align="right">18岁</td></tr><tr><td align="left">3</td><td align="center">王五</td><td align="right">19岁</td></tr></tbody></table><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><h3 id="纵向"><a href="#纵向" class="headerlink" title="纵向"></a>纵向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    开始 --&gt; 结束</span><br></pre></td></tr></table></figure><h3 id="横向"><a href="#横向" class="headerlink" title="横向"></a>横向</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    开始 --&gt; 结束</span><br></pre></td></tr></table></figure><h3 id="名字和内容分开"><a href="#名字和内容分开" class="headerlink" title="名字和内容分开"></a>名字和内容分开</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    一号节点[在此输入希望在一号节点上显示的文字内容]</span><br><span class="line">    二号节点[如常]</span><br><span class="line">    一号节点 --&gt; 二号节点</span><br></pre></td></tr></table></figure><h3 id="特殊形状"><a href="#特殊形状" class="headerlink" title="特殊形状"></a>特殊形状</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"> 圆((节点显示文本))</span><br><span class="line"> 这种&gt;也可以]</span><br><span class="line"> 长方形[或者]</span><br><span class="line"> 这个&#123;菱形&#125;</span><br><span class="line"> 我&#123;&#123;六角形&#125;&#125;</span><br><span class="line"> 平行四边形[/这个/]</span><br><span class="line"> 或者这种[\难以理解的脑洞/]</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="连接线"><a href="#连接线" class="headerlink" title="连接线"></a>连接线</h3><h4 id="一般的"><a href="#一般的" class="headerlink" title="一般的"></a>一般的</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A --- B -- 带文字连接线 --- C</span><br><span class="line">    B --&gt; A</span><br><span class="line">    C -.-&gt; D</span><br><span class="line">    E -.带文字也可以.-&gt; f ==&gt; A ==一样的 ==&gt; C</span><br></pre></td></tr></table></figure><h4 id="更高级的"><a href="#更高级的" class="headerlink" title="更高级的"></a>更高级的</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph 第一组</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph 第二组</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph 第三组</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><table><thead><tr><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-&gt;</td><td align="left">没有箭头的实线</td></tr><tr><td align="left">–&gt;</td><td align="left">没有箭头的虚线</td></tr><tr><td align="left">-&gt;&gt;</td><td align="left">有箭头的实线</td></tr><tr><td align="left">–&gt;&gt;</td><td align="left">有箭头的虚线</td></tr><tr><td align="left">-x</td><td align="left">有交叉箭头的实线</td></tr><tr><td align="left">–x</td><td align="left">有交叉箭头的虚线</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    李雷 -&gt;韩梅梅: Hi LiLei, How do you do?</span><br><span class="line">    韩梅梅--&gt;&gt;李雷: How do you do!</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant l as 李雷</span><br><span class="line">    participant h as 韩梅梅</span><br><span class="line">    l-&gt;&gt;h: Hello Hanmeimei, how are you?</span><br><span class="line">    h-&gt;&gt;l: Hello Lilei, I am fine, thank you, and you?</span><br><span class="line">    l--&gt;h: I am fine, thank you.</span><br></pre></td></tr></table></figure><h3 id="添加备注"><a href="#添加备注" class="headerlink" title="添加备注"></a>添加备注</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    李雷-&gt;&gt;韩梅梅: Hi Hanmeimei, How do you do?</span><br><span class="line">    Note over 李雷,韩梅梅: Lesson 1</span><br><span class="line">    韩梅梅--&gt;&gt;李雷: How do you do!</span><br></pre></td></tr></table></figure><h3 id="聚焦和另一种备注"><a href="#聚焦和另一种备注" class="headerlink" title="聚焦和另一种备注"></a>聚焦和另一种备注</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"> participant l as 李雷</span><br><span class="line">    participant h as 韩梅梅</span><br><span class="line">    l-&gt;&gt;h: Hello, what&#x27;s your name?</span><br><span class="line">    activate h</span><br><span class="line">    h--&gt;&gt;l: Hello, my name is Hanmeimei!</span><br><span class="line">    deactivate h</span><br><span class="line">    Note left of l : test</span><br><span class="line">    l-&gt;&gt;+h:yeah </span><br><span class="line">    h-&gt;&gt;-l :great</span><br></pre></td></tr></table></figure><h3 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"> participant l as 李雷</span><br><span class="line">    participant h as 韩梅梅</span><br><span class="line">    l -&gt;&gt; h: Hello, what&#x27;s your name?</span><br><span class="line">    loop test 听到与否</span><br><span class="line">     opt 听到了吗</span><br><span class="line">         l-&gt;&gt;h:can you hear me?</span><br><span class="line">         alt yes</span><br><span class="line">          h-&gt;&gt;l: yeah</span><br><span class="line">         else no</span><br><span class="line">          h-&gt;&gt;l: what</span><br><span class="line">         end</span><br><span class="line">     end</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    h -&gt;&gt; l :great</span><br></pre></td></tr></table></figure><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><p>包括用class或者关系声明类,用冒号声明类成员</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">    class 动物</span><br><span class="line">    class 我</span><br><span class="line">    动物 : 吃()</span><br><span class="line">    动物 : 我</span><br><span class="line">    我 --|&gt; 动物</span><br><span class="line">    我:另一个</span><br></pre></td></tr></table></figure><h3 id="更多声明"><a href="#更多声明" class="headerlink" title="更多声明"></a>更多声明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">  class 银行账户 &#123;</span><br><span class="line">      +String 户主</span><br><span class="line">      +BigDecimal 余额</span><br><span class="line">      +存(数量)* bool</span><br><span class="line">      +取(数量)- int</span><br><span class="line">  &#125;</span><br><span class="line">  classA --|&gt; classB : 继承</span><br><span class="line">  classC --* classD : 组成</span><br><span class="line">  classE --o classF : 集合</span><br><span class="line">  classG --&gt; classH : 关联</span><br><span class="line">  classI -- classJ : 实线连接</span><br><span class="line">  classK ..&gt; classL : 依赖</span><br><span class="line">  classM ..|&gt; classN : 实现</span><br><span class="line">  classO .. classP : 虚线连接</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h2><p>使用 <code>&lt;&lt;fork&gt;&gt;</code> 描述分支，使用 <code>&lt;&lt;join&gt;&gt;</code> 描述聚合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">stateDiagram</span><br><span class="line">        [*] --&gt; 下单成功</span><br><span class="line">        下单成功 --&gt; 备货</span><br><span class="line">        state 出货中 &lt;&lt;fork&gt;&gt;</span><br><span class="line">        备货 --&gt; 出货中</span><br><span class="line">        出货中 --&gt; 出货失败</span><br><span class="line">        出货失败 --&gt; [*]</span><br><span class="line">        出货中 --&gt; 出货确认</span><br><span class="line">        state 出货确认&#123;</span><br><span class="line">            出货中 --&gt; NumLock关</span><br><span class="line">            NumLock关 --&gt; NumLock开 : 按下 NumLock 键</span><br><span class="line">            NumLock开 --&gt; NumLock关 : 按下 NumLock 键</span><br><span class="line">            --</span><br><span class="line">            出货中 --&gt; CapsLock关</span><br><span class="line">            CapsLock关 --&gt; CapsLock开 : 按下 CapsLock 键</span><br><span class="line">            CapsLock开 --&gt; CapsLock关 : 按下 CapsLock 键</span><br><span class="line">            --</span><br><span class="line">            [*] --&gt; ScrollLock关</span><br><span class="line">            ScrollLock关 --&gt; ScrollLock开 : 按下 ScrollLock 键</span><br><span class="line">            ScrollLock开 --&gt; ScrollLock关 : 按下 ScrollLock 键</span><br><span class="line">        &#125;</span><br><span class="line">        出货确认 --&gt; 出货完毕</span><br><span class="line">        出货完毕 --&gt; 订单完成</span><br><span class="line">        订单完成 --&gt; [*]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">       dateFormat           :YYYY-MM-DD</span><br><span class="line">       title                :甘特图实例</span><br><span class="line"></span><br><span class="line">       section 基本任务</span><br><span class="line">       已完成任务            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">       进行中任务            :active,  des2, 2014-01-09, 3d</span><br><span class="line">       未开始任务1           :         des3, after des2, 5d</span><br><span class="line">       未开始任务2           :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">       section 紧急任务</span><br><span class="line">       已完成的紧急任务 :crit, done, 2014-01-06,24h</span><br><span class="line">       已完成紧急任务1       :crit, done, after des1, 2d</span><br><span class="line">       进行中紧急任务2       :crit, active, 3d</span><br><span class="line">       未开始紧急任务3       :crit, 5d</span><br><span class="line">       未开始一般任务4       :2d</span><br><span class="line">       未开始一般任务5       :1d</span><br><span class="line"></span><br><span class="line">       section 文档编写</span><br><span class="line">       进行中文档任务1       :active, a1, after des1, 3d</span><br><span class="line">       未开始文档任务2       :after a1  , 20h</span><br><span class="line">       未开始文档任务3       :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">       section 其他部分</span><br><span class="line">       其他任务1            :after doc1, 3d</span><br><span class="line">       其他任务2            :20h</span><br><span class="line">       其他任务3            :48h</span><br></pre></td></tr></table></figure><h2 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pie title 宠物的选择</span><br><span class="line">    &quot;狗&quot; : 386</span><br><span class="line">    &quot;猫&quot; : 185</span><br><span class="line">    &quot;兔子&quot; : 15 </span><br></pre></td></tr></table></figure><h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>如题^不难^但是<del>test</del>这个方式实际上不兼容</p><p>有一个更实用的HTML</p><p>a<sup>b<sub>c<sup>d</sup></sub></sup></p><h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><p>最基本的是这个,将等式包裹在$$里面</p><p>$$a+b \ c+d $$</p><h3 id="四则"><a href="#四则" class="headerlink" title="四则"></a>四则</h3><p>加法符号：$x+y&#x3D;z$<br>减法符号：$x-y&#x3D;z$<br>加减符号：$x \pm y&#x3D;z$<br>减加符号：$x \mp y&#x3D;z$<br>叉乘符号：$x \times y&#x3D;z$<br>点乘符号：$x \cdot y&#x3D;z$<br>星乘符号：$x \ast y&#x3D;z$<br>除法符号：$x \div y&#x3D;z$<br>斜除符号：$x&#x2F;y&#x3D;z$<br>分式1 ：$\frac{x+y}{y+z}$<br>分式2 ：${x+y} \over {y+z}$<br>绝对值：$|x+y|$  </p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>等于符号：$x+y&#x3D;z$<br>大于符号：$x+y&gt;z$<br>小于符号：$x+y&lt;z$<br>大于等于符号：$x+y \geq z$<br>小于等于符号：$x+y \leq z$<br>不等于符号：$x+y \neq z$<br>不大于等于符号：$x+y \ngeq z$<br>不大于等于符号：$x+y \not\geq z$<br>不小于等于符号：$x+y \nleq z$<br>不小于等于符号：$x+y \not\leq z$<br>约等于符号：$x+y \approx z$<br>恒定等于符号：$x+y \equiv z$  </p><h3 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h3><p>平均数符号：$\overline{xyz}$</p><p>开二次方符号：$\sqrt x$</p><p>开方符号：$\sqrt[3]{x+y}$</p><p>对数符号：$\log(x)$  </p><p>极限符号：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$  </p><p>极限符号：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$  </p><p>求和符号：$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$  </p><p>求和符号：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$  </p><p>积分符号：$\int^{\infty}_{0}{xdx}$  </p><p>积分符号：$\displaystyle \int^{\infty}_{0}{xdx}$</p><p>微分符号：<code>\partial</code>，如：$\frac{\partial x}{\partial y}$  </p><p>矩阵符号：$\left[ \begin{matrix} &amp;1 &amp;2 &amp;\cdots &amp;4 &amp;5 &amp;6 &amp;\cdots &amp;8\ &amp;\vdots &amp;\ddots &amp;\cdots &amp;13 &amp;14 &amp;15 &amp;\cdots &amp;16\end{matrix} \right]$</p><h3 id="公式里的上下标"><a href="#公式里的上下标" class="headerlink" title="公式里的上下标"></a>公式里的上下标</h3><p>上标符号：$x^2$<br>下标符号：$y_1$<br>组合符号：$a^{x^{2}+y^{2}}$  </p><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p>阿尔法：$\Alpha$，$\alpha$<br>贝塔：$\Beta$，$ \beta$<br>伽玛：$\Gamma$，$\gamma$<br>德尔塔：$\Delta$，$\delta$<br>艾普西龙：$\Epsilon$，$\epsilon$<br>捷塔：$\Zeta$，$\zeta$<br>依塔：$\Eta$，$\eta$<br>西塔：$\Theta$，$\theta$<br>艾欧塔：$\Iota$，$\iota$<br>喀帕：$\Kappa$，$\kappa$<br>拉姆达：$\Lambda$，$\lambda$<br>缪：$\Mu$，$\mu$<br>拗：$\Nu$，$\nu$<br>克西：$\Xi$，$\xi$<br>欧麦克轮：$\Omicron$，$\omicron$<br>派：$\Pi$，$\pi$<br>柔：$\Rho$，$\rho$<br>西格玛：$\Sigma$，$\sigma$<br>套：$\Tau$，$\tau$<br>宇普西龙：$\Upsilon$，$\upsilon$<br>发艾：$\Phi$，$\phi$<br>器：$\Chi$，$\chi$<br>普赛：$\Psi$，$\psi$<br>欧米伽：$\Omega$，$\omega$  </p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>这里有一个脚注[^脚注ID1]。</p><p>这里有一个脚注[^脚注ID2]。</p><p>[^脚注ID1]: 此处是 <strong>脚注</strong> 的 <em>文本内容</em>。<br>[^脚注ID2]: 对吧</p><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>这里主要测数学公式</p><p>$$\lim_{x\to \infty} {ax+b} \ \displaystyle\sum_{x&#x3D;0}^{x\to \infty} {1 \over x}$$</p><p>$$\in \sub $$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.imooc.com/wiki/markdownlesson&quot;&gt;来自这里&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h</summary>
      
    
    
    
    
    <category term="markdown" scheme="https://noirzh.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>A=B 第三章题解</title>
    <link href="https://noirzh.github.io/2023/11/09/%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>https://noirzh.github.io/2023/11/09/%E7%AC%AC%E4%B8%89%E7%AB%A0/</id>
    <published>2023-11-09T15:04:20.000Z</published>
    <updated>2023-11-11T08:49:46.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个关键字相当于在找到特定的子字符串之后,删去该子字符串,并且将我们指定的新字符串插入到原字符串的开头与结尾</p><p>类似于正则表达式的^与$的应用</p><p>很像是我们在第二章的操作:将字母压之后换成其他字母往后排以使得压缩持续进行</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="3-1-去除"><a href="#3-1-去除" class="headerlink" title="3-1 去除"></a>3-1 去除</h2><p>相当简单的教程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(start)a=</span><br><span class="line">(end)a=</span><br></pre></td></tr></table></figure><h2 id="3-2-旋转"><a href="#3-2-旋转" class="headerlink" title="3-2 旋转"></a>3-2 旋转</h2><p>这里只针对前面不是a进行操作,可以保证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(start)b=(end)b</span><br><span class="line">(start)c=(end)c</span><br></pre></td></tr></table></figure><h2 id="3-3-A到B-2"><a href="#3-3-A到B-2" class="headerlink" title="3-3 A到B 2"></a>3-3 A到B 2</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>开始上难度了,但是其实不难,我们只需要先把所有特定位置的a变成特殊的,然后再处理另一边的特殊的即可</p><p>就像是我们之前做过的一样,此时的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(start)a=x</span><br><span class="line">xa=ax</span><br><span class="line">(end)a=z</span><br><span class="line">az=za</span><br><span class="line">x=b</span><br><span class="line">z=b</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>我们很容易注意到我们的xa&#x3D;ax或者之类的操作只是把所有符合要求的串找出来,保证不阻塞生成</p><p>于是我们注意到移到另一边的位置显然更好(指行数更小),更新之后如下</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(start)a=(end)x</span><br><span class="line">(end)x=(start)b</span><br><span class="line">(end)a=(start)x</span><br><span class="line">(start)x=(end)b</span><br></pre></td></tr></table></figure><h2 id="3-5-首尾"><a href="#3-5-首尾" class="headerlink" title="3-5 首尾"></a>3-5 首尾</h2><p>通过上一题我们就知道弄到尾部直接判断即可</p><p>我们唯一要注意的就是判断在前,不然容易出死循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ax=(return)true #有任意一个就是真的,能迅速检查到</span><br><span class="line">by=(return)true</span><br><span class="line">cz=(return)true</span><br><span class="line"></span><br><span class="line">#以下的操作会1.在有相同的时候把除了最后一个字母之外都换成其他字母插入到后面 2.没有相同的时候所有都插入到后面</span><br><span class="line">(start)a=(end)x</span><br><span class="line">(start)b=(end)y</span><br><span class="line">(start)c=(end)z</span><br><span class="line">=(return)false</span><br></pre></td></tr></table></figure><h2 id="3-6-最多-2"><a href="#3-6-最多-2" class="headerlink" title="3-6 最多 2"></a>3-6 最多 2</h2><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>与之前的类似,但是我们需要保留所有作比较的字母来保证恢复,然后这里其实就可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab</span><br><span class="line">ab=(end)x</span><br><span class="line">cx=(end)y #y代表abc,可随时换成最多的 #剩下ac和bc</span><br><span class="line">#之后我们不用关心y具体是什么,只要二者消耗,剩下的那个做全员回复就行</span><br><span class="line"></span><br><span class="line">ac=(end)y</span><br><span class="line">bc=(end)y</span><br><span class="line">#做一个穷举</span><br><span class="line">ax=aa</span><br><span class="line">cy=cc</span><br><span class="line">by=bb</span><br><span class="line">ay=aa</span><br><span class="line">bx=bb</span><br></pre></td></tr></table></figure><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>发现ax,ay的行为是相同的,bx,by也是,优化以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab</span><br><span class="line">ab=(end)x</span><br><span class="line">cx=(end)y #y代表abc,可随时换成最多的</span><br><span class="line">#acy bcy ay by cy </span><br><span class="line"></span><br><span class="line">ac=(end)y</span><br><span class="line">bc=(end)y</span><br><span class="line">x=y</span><br><span class="line">cy=cc</span><br><span class="line">by=bb</span><br><span class="line">ay=a</span><br></pre></td></tr></table></figure><h2 id="3-7回文串"><a href="#3-7回文串" class="headerlink" title="3-7回文串"></a>3-7回文串</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>判断是不是消除之后全空即可,如3-5的加强版,我们进行全局替换,然后穷举非空情况,但是注意我们不用考虑剩下来的单个字母的情况,因为那种情况也属于回文串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cz=</span><br><span class="line">by=</span><br><span class="line">ax=</span><br><span class="line">(start)a=(end)x</span><br><span class="line">(start)b=(end)y</span><br><span class="line">(start)c=(end)z</span><br><span class="line">xy=(<span class="keyword">return</span>)false</span><br><span class="line">xz=(<span class="keyword">return</span>)false</span><br><span class="line">yx=(<span class="keyword">return</span>)false</span><br><span class="line">yz=(<span class="keyword">return</span>)false</span><br><span class="line">zx=(<span class="keyword">return</span>)false</span><br><span class="line">zy=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h3 id="挑战优化"><a href="#挑战优化" class="headerlink" title="挑战优化"></a>挑战优化</h3><p>注意到我们六行代码目的都只是为了判断是否有两个字母及以上存在</p><p>修改字符串使之存在首尾标识符即可,也就是说能保证显示出来两个字母不同且存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cuZn=</span><br><span class="line">buYn=</span><br><span class="line">auXn=</span><br><span class="line">(start)a=(end)uXn</span><br><span class="line">(start)b=(end)uYn #不影响排空</span><br><span class="line">(start)c=(end)uZn</span><br><span class="line">nu=(return)false  #出现这个说明仍有多个字母存在,整个字符串非空,</span><br><span class="line">=(return)true</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这个关键字相当于在找到特定的子字符串之后,删去该子字符串,并且将我们指定的新字符串插入到原字符串的开头与结尾&lt;/p&gt;
&lt;p&gt;类似于正则表达式</summary>
      
    
    
    
    
    <category term="A=B" scheme="https://noirzh.github.io/tags/A-B/"/>
    
  </entry>
  
  <entry>
    <title>A=B 第二章题解</title>
    <link href="https://noirzh.github.io/2023/11/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>https://noirzh.github.io/2023/11/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2023-11-07T07:24:50.000Z</published>
    <updated>2023-11-11T08:48:45.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们要好好理解一下a&#x3D;(return)b干了啥:</p><ol><li>找到匹配的字符串a</li><li>将整个我们的字符串变成b</li><li>中断循环,看结果</li></ol><p>换成函数表达就是 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> s:</span><br><span class="line">s=b</span><br><span class="line"><span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>之后判题的只能看到你返回的字符串b</p><h2 id="2-1-你好世界"><a href="#2-1-你好世界" class="headerlink" title="2.1 你好世界"></a>2.1 你好世界</h2><p>这里给出来了一个提示,在我们用空等的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=(<span class="keyword">return</span>)helloworld</span><br></pre></td></tr></table></figure><h2 id="2-2-AAA"><a href="#2-2-AAA" class="headerlink" title="2.2 AAA"></a>2.2 AAA</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们需要看a的数量,也就是说我们不用管b,c,将二者全消除之后剩下的就是a,再看其是否大于等于3个即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b=</span><br><span class="line">c=</span><br><span class="line">aaa=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false </span><br></pre></td></tr></table></figure><h2 id="2-3-恰好三个"><a href="#2-3-恰好三个" class="headerlink" title="2.3 恰好三个"></a>2.3 恰好三个</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>不用管到底是哪个字符,我们只需要验证是不是三个字符即可,所以先把所有字符变成一样的,例如c</p><p>接下来我们要判断的不是<code>ccc=(return)true</code>,因为字符串<code>cccc</code>同样包含<code>ccc</code>,</p><ul><li>我们首先就排除掉大于3个字符的,其一定包含四个及以上的字符串</li><li>这时候对只有三个字符的返回true</li><li>剩下的也是false</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=c</span><br><span class="line">b=c</span><br><span class="line">cccc=(<span class="keyword">return</span>)false </span><br><span class="line">ccc=(<span class="keyword">return</span>)true  </span><br><span class="line">=(<span class="keyword">return</span>)false</span><br></pre></td></tr></table></figure><h2 id="2-4-余数"><a href="#2-4-余数" class="headerlink" title="2.4 余数"></a>2.4 余数</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>这个是return使用的一个示例,所以我们考虑的仍然是只关心字符串长度,不关心内容</p><ol><li>将所有都替换成同样的字符</li><li>发现求的事余3,我们只需要每次都将三个字符的串放空,剩下的字符串长度就是总长度余3的结果</li><li>将长度换成数字</li></ol><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><p>这个思路在后续也有用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=c</span><br><span class="line">b=c </span><br><span class="line">ccc=           </span><br><span class="line">cc=(<span class="keyword">return</span>)<span class="number">2</span></span><br><span class="line">c=(<span class="keyword">return</span>)<span class="number">1</span></span><br><span class="line">=(<span class="keyword">return</span>)<span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="2-5-奇数"><a href="#2-5-奇数" class="headerlink" title="2.5 奇数"></a>2.5 奇数</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><h4 id="划分问题"><a href="#划分问题" class="headerlink" title="划分问题"></a>划分问题</h4><p>终于开始上难度了,但是这个 思想其实不难理解,我们先做一个简单的想法,我如何判断一长串a是否由奇数组成?</p><ol><li>考虑到字符串长度为1&lt;&#x3D;n&lt;&#x3D;7,很容易知道0,1,3,5,7为可能的长度</li><li>暴力枚举虽好,但是长度有点太大了,我们可以用另一个方法:奇数减去2之后仍然为奇数</li><li>所以我们很容易想到<code>aaa=a</code>来清理串,为什么不能是<code>aa=</code>?<ol><li>因为这样没有办法确认是刚开始就没有a,还是被偶数a消除掉的</li></ol></li><li>此时长度0,1,2,只有2表示原串是偶数</li></ol><h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4><p>然后我们知道要去做什么了:把三个字符串相同的集中在一起,相当于按顺序再为这三个字符轮流做上述检查操作</p><p>所以需要排序,让相同字符待在一起</p><p>接下来问题就好解决了</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">aaa=a</span><br><span class="line">bbb=b</span><br><span class="line">ccc=c</span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">bb=(<span class="keyword">return</span>)false</span><br><span class="line">cc=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>你肯定要回来看的,如果你看不懂2.6的话</p><p>发现了什么?我们将同样的情况循环了3遍,也就是说,在单独讨论的时候a,b,c其实是等价的,有没有什么办法将它们的等价用代码解释出来?</p><p>一个很有趣的想法是将b,c转换成等价a,最后判断三段a是否都满足奇数</p><p>一点点魔法:设置一个障碍,让所有相邻相同的字母没有障碍,而让不同的字母之间有障碍</p><p>考虑如下代码的运作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br></pre></td></tr></table></figure><p>这种情况下会发生什么:相邻的b变成了中间隔着3个x的a,不同字母之间隔着2个x</p><p>更加显式地能看到假设 bacacc:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aabccc</span><br><span class="line">-&gt; aaxxaxxxaxxxaxxxaxx</span><br><span class="line">-&gt; a|a| xxax |xaxx|xaxx|xaxx</span><br></pre></td></tr></table></figure><p>仔细观察,发现相隔3个x的都能去掉!,此时会变成用两个x阻隔的三个段,每个段里面的a的个数是a或b或c的个数,此时<code>bacacc</code>变成<code>aaxxaxxaaaxx</code></p><p>然后判断即可</p><p>得出来新的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br><span class="line">xxx=</span><br><span class="line">aaa=a <span class="comment">#等价处理</span></span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><p>这种等价思想很重要,在之后会多次使用</p><p>其实这种等价想法在于什么:在于让相同字母之间的间隔一样,不同字母的间隔不一样,以这种思路你完全可以设计如下方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#其中()表示重复几次</span></span><br><span class="line">b=x(n)ax(m)</span><br><span class="line"><span class="comment">#则c和b之间的距离也应为n,b和b之间距离为m+n</span></span><br><span class="line"><span class="comment">#所以</span></span><br><span class="line">c=x(n-m)ax(2m)</span><br><span class="line"><span class="comment">#符合以上要求的都可以替换</span></span><br><span class="line"><span class="comment">#比如以下代码n=6,m=3,一样可以通过</span></span><br><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br><span class="line">b=xxxxxxaxxx</span><br><span class="line">c=xxxaxxxxxx</span><br><span class="line">xxxxxxxxx=</span><br><span class="line">aaa=a</span><br><span class="line">aa=(<span class="keyword">return</span>)false</span><br><span class="line">=(<span class="keyword">return</span>)true</span><br></pre></td></tr></table></figure><h2 id="2-6-独一无二"><a href="#2-6-独一无二" class="headerlink" title="2.6 独一无二"></a>2.6 独一无二</h2><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>这里建议先看一下上面的拓展</p><p>然后我们先翻译一下题目:希望这个长字符串出现的单字符字符串有且只有一个:</p><ul><li>aaabccc:只有一个a,是我们需要的</li><li>aaabacc:b和a都有,是错误的</li><li>实际上我们要做的是在<code>aaa=aa;bbb=bb;ccc=cc</code>之后,看单个的不成对字母有几个</li></ul><p>我们只需要知道是不是等于1</p><p>和上题拓展法类似,我们等价之后再做类似操作,现在得出来的因为没有排序,我们现在能保证的是</p><ol><li>相同字母之间x个数为0或者3</li><li>不同字母之间x个数为1或者2</li></ol><p>由上述两条我们将串收敛一下,把相等相邻的聚在一块,然后格式一下彼此之间距离</p><p>此时出现的就是<code>axaaaxaaxa</code>之类的东西,更进一步地,我们将所有长串都收成空串</p><p>此时我们要找的是此时里面是不是只有一个a</p><p>看到a就return肯定不行,但是我们能先把多个a存在的删掉,其格式一定为<code>axaxa</code>之类,因为我们上述操作不相同的单字符串串之间一定有一个x阻隔</p><p>这时候就有只剩下a的情况了,此时是我们想要的</p><p>剩下的情况就是全是长串,也是我们不想要的</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">b=xxax</span><br><span class="line">c=xaxx</span><br><span class="line">xxx= <span class="comment">#这之后相邻的同字符的串就是相邻的a</span></span><br><span class="line">xx=x <span class="comment">#此时不同串之间相差1x</span></span><br><span class="line">aaa=aa </span><br><span class="line">aa= <span class="comment">#两步除长串</span></span><br><span class="line">axa=(<span class="keyword">return</span>)false</span><br><span class="line">a=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false</span><br></pre></td></tr></table></figure><h2 id="2-7上升"><a href="#2-7上升" class="headerlink" title="2.7上升"></a>2.7上升</h2><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>排序</p><ol><li>做之后还会有效的两两对比</li><li>先确定是不是c比d多,再确定是不是b比a多</li><li>建议先看下面的两个</li></ol><h3 id="实现上面的体现"><a href="#实现上面的体现" class="headerlink" title="实现上面的体现"></a>实现上面的体现</h3><ol><li>c比b多则b全部化为d,此时还有c剩余</li><li>d比a多则a全消失,d还有剩余</li><li>也就是说dc存在的时候其实是(bcc)还有剩,合法性足够强</li><li>我或许需要一些更加显然的理解,但是现在没有…以后可能试试</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line">bc=d   <span class="comment">#合法情况是adc</span></span><br><span class="line">bd=db  <span class="comment">#此时d代表的是bc</span></span><br><span class="line">ad=    <span class="comment">#消去abc 此时如果合法一定是dc</span></span><br><span class="line">dc=(<span class="keyword">return</span>)true</span><br><span class="line">=(<span class="keyword">return</span>)false <span class="comment">#其他就都不合法</span></span><br></pre></td></tr></table></figure><h2 id="2-8最多"><a href="#2-8最多" class="headerlink" title="2.8最多"></a>2.8最多</h2><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><ol><li>对于这种考虑总体字母的,我们先把他们放在一起,先排序</li><li>我们考虑到排序,所以我们只要比较三者的多少,很明显能考虑到两两对比</li><li>接下来我们最好看代码讲解</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line"></span><br><span class="line">bc=d    </span><br><span class="line">bd=db  <span class="comment">#此时d代表的是bc</span></span><br><span class="line">ad=    <span class="comment">#消去abc,接下来剩下的就只有一个或两个字母,一定,而且不是bc,把三种组合罗列一下就是结果,只有一个字母显然是答案</span></span><br><span class="line">ac=</span><br><span class="line">ab=</span><br><span class="line"></span><br><span class="line">a=(<span class="keyword">return</span>)a</span><br><span class="line">b=(<span class="keyword">return</span>)b</span><br><span class="line">c=(<span class="keyword">return</span>)c</span><br></pre></td></tr></table></figure><h2 id="2-9最少"><a href="#2-9最少" class="headerlink" title="2.9最少"></a>2.9最少</h2><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>思路与上面的类似</p><p>直接看代码吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ca=ac</span><br><span class="line">cb=bc</span><br><span class="line">ba=ab <span class="comment">#先排序</span></span><br><span class="line"></span><br><span class="line">ab=d</span><br><span class="line">db=bd</span><br><span class="line">dc=  <span class="comment">#销去了abc,可能剩下ad,ac,bc</span></span><br><span class="line"> </span><br><span class="line">d=(<span class="keyword">return</span>)c <span class="comment">#d存在说明d比c多,也就是ab组合都比c多</span></span><br><span class="line">ac=(<span class="keyword">return</span>)b </span><br><span class="line">bc=(<span class="keyword">return</span>)a</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们要好好理解一下a&amp;#x3D;(return)b干了啥:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到匹配的字符串a&lt;/li&gt;
&lt;li&gt;将整个我们的字符</summary>
      
    
    
    
    
    <category term="A=B" scheme="https://noirzh.github.io/tags/A-B/"/>
    
  </entry>
  
  <entry>
    <title>A=B 第一章题解</title>
    <link href="https://noirzh.github.io/2023/11/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <id>https://noirzh.github.io/2023/11/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/</id>
    <published>2023-11-01T13:04:50.000Z</published>
    <updated>2023-11-11T08:49:05.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>A&#x3D;B语言也较为特殊,可以认为整体是个循环体,但是是每次循环只要能够执行一条命令就去执行,然后就重新回到循环开头</p><p>这个性质会在后续不断应用</p><p>而且其本质在做的就是字符串替换</p><h2 id="1-1-A到B"><a href="#1-1-A到B" class="headerlink" title="1.1 A到B"></a>1.1 A到B</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=b</span><br></pre></td></tr></table></figure><h2 id="1-2-大写"><a href="#1-2-大写" class="headerlink" title="1.2 大写"></a>1.2 大写</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=A</span><br><span class="line">b=B</span><br><span class="line">c=C</span><br></pre></td></tr></table></figure><h2 id="1-3-去重"><a href="#1-3-去重" class="headerlink" title="1.3 去重"></a>1.3 去重</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>显然我们最后要保留的状态是没有连续字母</p><p>只需要将重复的几个压成一个就行,不过要注意A&#x3D;B这个语言的特殊性</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aa=a</span><br><span class="line">bb=b</span><br><span class="line">cc=c</span><br></pre></td></tr></table></figure><h2 id="1-4-去重-2"><a href="#1-4-去重-2" class="headerlink" title="1.4 去重 2"></a>1.4 去重 2</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>同理,这个是把连续的a压没,</p><p>这里之所以会有aaa,而不是直接<code>aa=</code>是因为假如只压缩的可能会剩下来:例如<code>aaa</code>会被替换成<code>a</code></p><p>,我们这么做的本质是将多的字母先压成两个,再把这两个消除掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aaa=aa</span><br><span class="line">aa=</span><br></pre></td></tr></table></figure><h2 id="1-5-排序"><a href="#1-5-排序" class="headerlink" title="1.5 排序"></a>1.5 排序</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>研究语言的必经之路,排序,注意到我们现在在做的是替换字符串</p><p>我们的目的是希望各个字母都在其应该在的位置,但我们不知道数组下标,怎么样能达成这两个条件呢?</p><p>我们需要一个只看相邻的排序算法,也就是冒泡算法,实现起来不难,如下</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>看到了吗,本质就是大的向后挪动,这个在单步运行时候看的更清楚</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ba=ab</span><br><span class="line">cb=bc</span><br><span class="line">ca=ac</span><br></pre></td></tr></table></figure><p>这个排序在之后会常用到的,当我们只关心字母数量之类的而不关心其位置的时候</p><h2 id="1-6-比较"><a href="#1-6-比较" class="headerlink" title="1.6 比较"></a>1.6 比较</h2><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>比较a和b的多少,还记得去重怎么做的吗?把两个相同的数摁在一起消除</p><p>这个题也一样,我们把两个不同的字母摁在一起消除,剩下的就是多的字母</p><p>值得一提的是压字母存在两个情况</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ab=</span><br><span class="line">ba=</span><br><span class="line">aa=a</span><br><span class="line">bb=b</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;A&amp;#x3D;B语言也较为特殊,可以认为整体是个循环体,但是是每次循环只要能够执行一条命令就去执行,然后就重新回到循环开头&lt;/p&gt;
&lt;p&gt;这</summary>
      
    
    
    
    
    <category term="A=B" scheme="https://noirzh.github.io/tags/A-B/"/>
    
  </entry>
  
</feed>
