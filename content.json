{"meta":{"title":"一共十七划","subtitle":"Noir","description":"我们逃去看海吧","author":"Noir","url":"https://noirzh.github.io","root":"/"},"pages":[{"title":"关于","date":"2023-11-12T02:09:05.480Z","updated":"2023-11-12T02:09:05.480Z","comments":false,"path":"about/index.html","permalink":"https://noirzh.github.io/about/index.html","excerpt":"","text":"代码苦手,建模苦手,破铜烂铁收集者 会将一些自己觉得有趣的学习内容放在这里 希望能帮到你"},{"title":"书单","date":"2023-11-11T07:21:08.752Z","updated":"2023-11-11T07:21:08.752Z","comments":false,"path":"books/index.html","permalink":"https://noirzh.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-11-11T07:21:08.753Z","updated":"2023-11-11T07:21:08.753Z","comments":true,"path":"links/index.html","permalink":"https://noirzh.github.io/links/index.html","excerpt":"","text":""},{"title":"分类","date":"2023-11-11T07:21:08.752Z","updated":"2023-11-11T07:21:08.752Z","comments":false,"path":"categories/index.html","permalink":"https://noirzh.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2023-11-11T07:21:08.754Z","updated":"2023-11-11T07:21:08.754Z","comments":false,"path":"tags/index.html","permalink":"https://noirzh.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-11-11T07:21:08.754Z","updated":"2023-11-11T07:21:08.754Z","comments":false,"path":"repository/index.html","permalink":"https://noirzh.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"markdown排版效果","slug":"My-New-Post","date":"2023-11-11T07:24:50.000Z","updated":"2023-11-12T01:35:13.695Z","comments":true,"path":"2023/11/11/My-New-Post/","permalink":"https://noirzh.github.io/2023/11/11/My-New-Post/","excerpt":"","text":"来自这里 基础部分typora能够实时渲染,所以记得开源代码显示器 标题这个我不用多说吧 段落除了这个回车之外 还有这个 换行或者shift+entet我我 我 风格以下代码能够实现换行,大概,放在最后一行 p{text-indent:2em} 分割线 这样或者 这样 项 无序项 及其连环套 简单吧 有序 同理 项 引用 引用 和交叉引用 很简单 对吧 层数 强调包括加粗和斜体甚至可以这样 辅助线删除和下划线 字体使用 &lt;font&gt; 标签的修改字体这里是默认字体 这里是黑体 这里是楷体 这里是扩展字体 p {font-size: 2rem;} 使用 &lt;font&gt; 标签的修改字号这里是默认正文字号 1号字 最小 2号字 3号字 默认 4号字 5号字 6号字 7号字 最大 前景色和背景色使用 &lt;font&gt; 的标签的修改文字前景色红色绿色蓝色 使用 rgb 颜色值 使用十六进制颜色值 使用 style 属性修改文字的背景色红色绿色蓝色 使用 rgb 颜色值 使用十六进制颜色值 更丰富背景样式I wish you a Merry Christmas使用图片作背景 太阳太阳，给我们带来，七色光彩渐变背景色 行内代码和代码块定义行内代码行内的 html 代码：&lt;head&gt;&lt;title&gt;网页标题&lt;/title&gt;&lt;/head&gt; 行内的 json 代码：var json = &#123;key: value&#125;; 使用反引号定义代码块123pubic static void main(String[] args) &#123; System.out.println(&quot;Hello world&quot;);&#125; 超链接声明超链接一对中括号就可以将文字转换为超链接，如: 北京，上海，广州，深圳 声明超链接的细节声明超链接的细节天坛公园，是明清两代皇帝每年祭天和祈祷五谷丰收的地方。天坛以严谨的建筑布局、奇特的建筑构造和瑰丽的建筑装饰著称于世。 图片使用全局声明方式插入图片![][img2]![][img2] img { border-radius: 50% !important; border: 30px solid #eee; } 拓展此时很多东西就需要有相应插件了,自己查看 任务列表在 Markdown 文件中，在 “ 无序列表 -,+,* “ 后面使用 「中括号 []」 声明复选框。在中括号中写入 x ，便可实现选中效果。 就像是 复选框 checkbox Java Php 转义在文档中使用特殊字符如果不使用转义字符，以下算式将不能按预期输出234&#x3D;24以上算式的正确写法为：2*3*4&#x3D;24 注释基于 HTML 样式 这是一段被注释掉的文字 这是一段没有被注释的文字 通过 Markdown 解析达到注释效果这是一段没有被注释的文字 表格Markdown 表格包含三个部分：表头、分割线、数据。 表头 用来对列名对象进行描述，也就是通常所说的列名； 数据 用来展示每行的具体内容，数据是表格的核心； 分割线 用来区分表头和数据，也是 Markdown 中表格定义的最基本语法要求。 表格内容的对齐 左对齐 居中对齐 右对齐 1 张三 17岁 2 李四 18岁 3 王五 19岁 流程图纵向12graph TD 开始 --&gt; 结束 横向12graph LR 开始 --&gt; 结束 名字和内容分开1234graph LR 一号节点[在此输入希望在一号节点上显示的文字内容] 二号节点[如常] 一号节点 --&gt; 二号节点 特殊形状123456789graph TD 圆((节点显示文本)) 这种&gt;也可以] 长方形[或者] 这个&#123;菱形&#125; 我&#123;&#123;六角形&#125;&#125; 平行四边形[/这个/] 或者这种[\\难以理解的脑洞/] 连接线一般的12345graph LR A --- B -- 带文字连接线 --- C B --&gt; A C -.-&gt; D E -.带文字也可以.-&gt; f ==&gt; A ==一样的 ==&gt; C 更高级的1234567891011graph TB c1--&gt;a2 subgraph 第一组 a1--&gt;a2 end subgraph 第二组 b1--&gt;b2 end subgraph 第三组 c1--&gt;c2 end 时序图 类型 描述 -&gt; 没有箭头的实线 –&gt; 没有箭头的虚线 -&gt;&gt; 有箭头的实线 –&gt;&gt; 有箭头的虚线 -x 有交叉箭头的实线 –x 有交叉箭头的虚线 123sequenceDiagram 李雷 -&gt;韩梅梅: Hi LiLei, How do you do? 韩梅梅--&gt;&gt;李雷: How do you do! 别名123456sequenceDiagram participant l as 李雷 participant h as 韩梅梅 l-&gt;&gt;h: Hello Hanmeimei, how are you? h-&gt;&gt;l: Hello Lilei, I am fine, thank you, and you? l--&gt;h: I am fine, thank you. 添加备注1234sequenceDiagram 李雷-&gt;&gt;韩梅梅: Hi Hanmeimei, How do you do? Note over 李雷,韩梅梅: Lesson 1 韩梅梅--&gt;&gt;李雷: How do you do! 聚焦和另一种备注12345678910sequenceDiagram participant l as 李雷 participant h as 韩梅梅 l-&gt;&gt;h: Hello, what&#x27;s your name? activate h h--&gt;&gt;l: Hello, my name is Hanmeimei! deactivate h Note left of l : test l-&gt;&gt;+h:yeah h-&gt;&gt;-l :great 逻辑12345678910111213141516sequenceDiagram participant l as 李雷 participant h as 韩梅梅 l -&gt;&gt; h: Hello, what&#x27;s your name? loop test 听到与否 opt 听到了吗 l-&gt;&gt;h:can you hear me? alt yes h-&gt;&gt;l: yeah else no h-&gt;&gt;l: what end end end h -&gt;&gt; l :great 类图包括用class或者关系声明类,用冒号声明类成员 1234567classDiagram class 动物 class 我 动物 : 吃() 动物 : 我 我 --|&gt; 动物 我:另一个 更多声明12345678910111213141516classDiagram class 银行账户 &#123; +String 户主 +BigDecimal 余额 +存(数量)* bool +取(数量)- int &#125; classA --|&gt; classB : 继承 classC --* classD : 组成 classE --o classF : 集合 classG --&gt; classH : 关联 classI -- classJ : 实线连接 classK ..&gt; classL : 依赖 classM ..|&gt; classN : 实现 classO .. classP : 虚线连接 状态图使用 &lt;&lt;fork&gt;&gt; 描述分支，使用 &lt;&lt;join&gt;&gt; 描述聚合。 12345678910111213141516171819202122232425stateDiagram [*] --&gt; 下单成功 下单成功 --&gt; 备货 state 出货中 &lt;&lt;fork&gt;&gt; 备货 --&gt; 出货中 出货中 --&gt; 出货失败 出货失败 --&gt; [*] 出货中 --&gt; 出货确认 state 出货确认&#123; 出货中 --&gt; NumLock关 NumLock关 --&gt; NumLock开 : 按下 NumLock 键 NumLock开 --&gt; NumLock关 : 按下 NumLock 键 -- 出货中 --&gt; CapsLock关 CapsLock关 --&gt; CapsLock开 : 按下 CapsLock 键 CapsLock开 --&gt; CapsLock关 : 按下 CapsLock 键 -- [*] --&gt; ScrollLock关 ScrollLock关 --&gt; ScrollLock开 : 按下 ScrollLock 键 ScrollLock开 --&gt; ScrollLock关 : 按下 ScrollLock 键 &#125; 出货确认 --&gt; 出货完毕 出货完毕 --&gt; 订单完成 订单完成 --&gt; [*] 甘特图123456789101112131415161718192021222324252627gantt dateFormat :YYYY-MM-DD title :甘特图实例 section 基本任务 已完成任务 :done, des1, 2014-01-06,2014-01-08 进行中任务 :active, des2, 2014-01-09, 3d 未开始任务1 : des3, after des2, 5d 未开始任务2 : des4, after des3, 5d section 紧急任务 已完成的紧急任务 :crit, done, 2014-01-06,24h 已完成紧急任务1 :crit, done, after des1, 2d 进行中紧急任务2 :crit, active, 3d 未开始紧急任务3 :crit, 5d 未开始一般任务4 :2d 未开始一般任务5 :1d section 文档编写 进行中文档任务1 :active, a1, after des1, 3d 未开始文档任务2 :after a1 , 20h 未开始文档任务3 :doc1, after a1 , 48h section 其他部分 其他任务1 :after doc1, 3d 其他任务2 :20h 其他任务3 :48h 饼图1234pie title 宠物的选择 &quot;狗&quot; : 386 &quot;猫&quot; : 185 &quot;兔子&quot; : 15 上下标如题^不难^但是test这个方式实际上不兼容 有一个更实用的HTML abcd 数学公式最基本的是这个,将等式包裹在$$里面 $$a+b \\ c+d $$ 四则加法符号：$x+y&#x3D;z$减法符号：$x-y&#x3D;z$加减符号：$x \\pm y&#x3D;z$减加符号：$x \\mp y&#x3D;z$叉乘符号：$x \\times y&#x3D;z$点乘符号：$x \\cdot y&#x3D;z$星乘符号：$x \\ast y&#x3D;z$除法符号：$x \\div y&#x3D;z$斜除符号：$x&#x2F;y&#x3D;z$分式1 ：$\\frac{x+y}{y+z}$分式2 ：${x+y} \\over {y+z}$绝对值：$|x+y|$ 逻辑运算等于符号：$x+y&#x3D;z$大于符号：$x+y&gt;z$小于符号：$x+y&lt;z$大于等于符号：$x+y \\geq z$小于等于符号：$x+y \\leq z$不等于符号：$x+y \\neq z$不大于等于符号：$x+y \\ngeq z$不大于等于符号：$x+y \\not\\geq z$不小于等于符号：$x+y \\nleq z$不小于等于符号：$x+y \\not\\leq z$约等于符号：$x+y \\approx z$恒定等于符号：$x+y \\equiv z$ 高级运算平均数符号：$\\overline{xyz}$ 开二次方符号：$\\sqrt x$ 开方符号：$\\sqrt[3]{x+y}$ 对数符号：$\\log(x)$ 极限符号：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$ 极限符号：$\\displaystyle \\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$ 求和符号：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$ 求和符号：$\\displaystyle \\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$ 积分符号：$\\int^{\\infty}_{0}{xdx}$ 积分符号：$\\displaystyle \\int^{\\infty}_{0}{xdx}$ 微分符号：\\partial，如：$\\frac{\\partial x}{\\partial y}$ 矩阵符号：$\\left[ \\begin{matrix} &amp;1 &amp;2 &amp;\\cdots &amp;4 &amp;5 &amp;6 &amp;\\cdots &amp;8\\ &amp;\\vdots &amp;\\ddots &amp;\\cdots &amp;13 &amp;14 &amp;15 &amp;\\cdots &amp;16\\end{matrix} \\right]$ 公式里的上下标上标符号：$x^2$下标符号：$y_1$组合符号：$a^{x^{2}+y^{2}}$ 希腊字母阿尔法：$\\Alpha$，$\\alpha$贝塔：$\\Beta$，$ \\beta$伽玛：$\\Gamma$，$\\gamma$德尔塔：$\\Delta$，$\\delta$艾普西龙：$\\Epsilon$，$\\epsilon$捷塔：$\\Zeta$，$\\zeta$依塔：$\\Eta$，$\\eta$西塔：$\\Theta$，$\\theta$艾欧塔：$\\Iota$，$\\iota$喀帕：$\\Kappa$，$\\kappa$拉姆达：$\\Lambda$，$\\lambda$缪：$\\Mu$，$\\mu$拗：$\\Nu$，$\\nu$克西：$\\Xi$，$\\xi$欧麦克轮：$\\Omicron$，$\\omicron$派：$\\Pi$，$\\pi$柔：$\\Rho$，$\\rho$西格玛：$\\Sigma$，$\\sigma$套：$\\Tau$，$\\tau$宇普西龙：$\\Upsilon$，$\\upsilon$发艾：$\\Phi$，$\\phi$器：$\\Chi$，$\\chi$普赛：$\\Psi$，$\\psi$欧米伽：$\\Omega$，$\\omega$ 脚注这里有一个脚注[^脚注ID1]。 这里有一个脚注[^脚注ID2]。 [^脚注ID1]: 此处是 脚注 的 文本内容。[^脚注ID2]: 对吧 test这里主要测数学公式 $$\\lim_{x\\to \\infty} {ax+b} \\ \\displaystyle\\sum_{x&#x3D;0}^{x\\to \\infty} {1 \\over x}$$ $$\\in \\sub $$","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://noirzh.github.io/tags/markdown/"}]},{"title":"A=B 第三章题解","slug":"第三章","date":"2023-11-09T15:04:20.000Z","updated":"2023-11-11T08:49:46.752Z","comments":true,"path":"2023/11/09/第三章/","permalink":"https://noirzh.github.io/2023/11/09/%E7%AC%AC%E4%B8%89%E7%AB%A0/","excerpt":"","text":"前言这个关键字相当于在找到特定的子字符串之后,删去该子字符串,并且将我们指定的新字符串插入到原字符串的开头与结尾 类似于正则表达式的^与$的应用 很像是我们在第二章的操作:将字母压之后换成其他字母往后排以使得压缩持续进行 3-1 去除相当简单的教程 12(start)a=(end)a= 3-2 旋转这里只针对前面不是a进行操作,可以保证 12(start)b=(end)b(start)c=(end)c 3-3 A到B 2思路开始上难度了,但是其实不难,我们只需要先把所有特定位置的a变成特殊的,然后再处理另一边的特殊的即可 就像是我们之前做过的一样,此时的代码如下 123456(start)a=xxa=ax(end)a=zaz=zax=bz=b 优化我们很容易注意到我们的xa&#x3D;ax或者之类的操作只是把所有符合要求的串找出来,保证不阻塞生成 于是我们注意到移到另一边的位置显然更好(指行数更小),更新之后如下 代码1234(start)a=(end)x(end)x=(start)b(end)a=(start)x(start)x=(end)b 3-5 首尾通过上一题我们就知道弄到尾部直接判断即可 我们唯一要注意的就是判断在前,不然容易出死循环 123456789ax=(return)true #有任意一个就是真的,能迅速检查到by=(return)truecz=(return)true#以下的操作会1.在有相同的时候把除了最后一个字母之外都换成其他字母插入到后面 2.没有相同的时候所有都插入到后面(start)a=(end)x(start)b=(end)y(start)c=(end)z=(return)false 3-6 最多 2思路与之前的类似,但是我们需要保留所有作比较的字母来保证恢复,然后这里其实就可以 123456789101112131415ca=accb=bcba=abab=(end)xcx=(end)y #y代表abc,可随时换成最多的 #剩下ac和bc#之后我们不用关心y具体是什么,只要二者消耗,剩下的那个做全员回复就行ac=(end)ybc=(end)y#做一个穷举ax=aacy=ccby=bbay=aabx=bb 优化发现ax,ay的行为是相同的,bx,by也是,优化以下 12345678910111213ca=accb=bcba=abab=(end)xcx=(end)y #y代表abc,可随时换成最多的#acy bcy ay by cy ac=(end)ybc=(end)yx=ycy=ccby=bbay=a 3-7回文串思路判断是不是消除之后全空即可,如3-5的加强版,我们进行全局替换,然后穷举非空情况,但是注意我们不用考虑剩下来的单个字母的情况,因为那种情况也属于回文串 12345678910111213cz=by=ax=(start)a=(end)x(start)b=(end)y(start)c=(end)zxy=(return)falsexz=(return)falseyx=(return)falseyz=(return)falsezx=(return)falsezy=(return)false=(return)true 挑战优化注意到我们六行代码目的都只是为了判断是否有两个字母及以上存在 修改字符串使之存在首尾标识符即可,也就是说能保证显示出来两个字母不同且存在 12345678cuZn=buYn=auXn=(start)a=(end)uXn(start)b=(end)uYn #不影响排空(start)c=(end)uZnnu=(return)false #出现这个说明仍有多个字母存在,整个字符串非空,=(return)true","categories":[],"tags":[{"name":"A=B","slug":"A-B","permalink":"https://noirzh.github.io/tags/A-B/"}]},{"title":"A=B 第二章题解","slug":"第二章","date":"2023-11-07T07:24:50.000Z","updated":"2023-11-11T08:48:45.921Z","comments":true,"path":"2023/11/07/第二章/","permalink":"https://noirzh.github.io/2023/11/07/%E7%AC%AC%E4%BA%8C%E7%AB%A0/","excerpt":"","text":"前言我们要好好理解一下a&#x3D;(return)b干了啥: 找到匹配的字符串a 将整个我们的字符串变成b 中断循环,看结果 换成函数表达就是 123if a in s: s=b return s 之后判题的只能看到你返回的字符串b 2.1 你好世界这里给出来了一个提示,在我们用空等的时候 1=(return)helloworld 2.2 AAA思路我们需要看a的数量,也就是说我们不用管b,c,将二者全消除之后剩下的就是a,再看其是否大于等于3个即可 代码1234b=c=aaa=(return)true=(return)false 2.3 恰好三个思路不用管到底是哪个字符,我们只需要验证是不是三个字符即可,所以先把所有字符变成一样的,例如c 接下来我们要判断的不是ccc=(return)true,因为字符串cccc同样包含ccc, 我们首先就排除掉大于3个字符的,其一定包含四个及以上的字符串 这时候对只有三个字符的返回true 剩下的也是false 代码12345a=cb=ccccc=(return)false ccc=(return)true =(return)false 2.4 余数思路这个是return使用的一个示例,所以我们考虑的仍然是只关心字符串长度,不关心内容 将所有都替换成同样的字符 发现求的事余3,我们只需要每次都将三个字符的串放空,剩下的字符串长度就是总长度余3的结果 将长度换成数字 代码这个思路在后续也有用 123456a=cb=c ccc= cc=(return)2c=(return)1=(return)0 2.5 奇数思路划分问题终于开始上难度了,但是这个 思想其实不难理解,我们先做一个简单的想法,我如何判断一长串a是否由奇数组成? 考虑到字符串长度为1&lt;&#x3D;n&lt;&#x3D;7,很容易知道0,1,3,5,7为可能的长度 暴力枚举虽好,但是长度有点太大了,我们可以用另一个方法:奇数减去2之后仍然为奇数 所以我们很容易想到aaa=a来清理串,为什么不能是aa=? 因为这样没有办法确认是刚开始就没有a,还是被偶数a消除掉的 此时长度0,1,2,只有2表示原串是偶数 做法然后我们知道要去做什么了:把三个字符串相同的集中在一起,相当于按顺序再为这三个字符轮流做上述检查操作 所以需要排序,让相同字符待在一起 接下来问题就好解决了 代码12345678910ba=abcb=bcca=acaaa=abbb=bccc=caa=(return)falsebb=(return)falsecc=(return)false=(return)true 进阶你肯定要回来看的,如果你看不懂2.6的话 发现了什么?我们将同样的情况循环了3遍,也就是说,在单独讨论的时候a,b,c其实是等价的,有没有什么办法将它们的等价用代码解释出来? 一个很有趣的想法是将b,c转换成等价a,最后判断三段a是否都满足奇数 一点点魔法:设置一个障碍,让所有相邻相同的字母没有障碍,而让不同的字母之间有障碍 考虑如下代码的运作 12345ba=abcb=bcca=acb=xxaxc=xaxx 这种情况下会发生什么:相邻的b变成了中间隔着3个x的a,不同字母之间隔着2个x 更加显式地能看到假设 bacacc: 123aabccc-&gt; aaxxaxxxaxxxaxxxaxx-&gt; a|a| xxax |xaxx|xaxx|xaxx 仔细观察,发现相隔3个x的都能去掉!,此时会变成用两个x阻隔的三个段,每个段里面的a的个数是a或b或c的个数,此时bacacc变成aaxxaxxaaaxx 然后判断即可 得出来新的代码如下 123456789ba=abcb=bcca=acb=xxaxc=xaxxxxx=aaa=a #等价处理aa=(return)false=(return)true 这种等价思想很重要,在之后会多次使用 其实这种等价想法在于什么:在于让相同字母之间的间隔一样,不同字母的间隔不一样,以这种思路你完全可以设计如下方法: 12345678910111213141516#其中()表示重复几次b=x(n)ax(m)#则c和b之间的距离也应为n,b和b之间距离为m+n#所以c=x(n-m)ax(2m)#符合以上要求的都可以替换#比如以下代码n=6,m=3,一样可以通过ba=abcb=bcca=acb=xxxxxxaxxxc=xxxaxxxxxxxxxxxxxxx=aaa=aaa=(return)false=(return)true 2.6 独一无二思路这里建议先看一下上面的拓展 然后我们先翻译一下题目:希望这个长字符串出现的单字符字符串有且只有一个: aaabccc:只有一个a,是我们需要的 aaabacc:b和a都有,是错误的 实际上我们要做的是在aaa=aa;bbb=bb;ccc=cc之后,看单个的不成对字母有几个 我们只需要知道是不是等于1 和上题拓展法类似,我们等价之后再做类似操作,现在得出来的因为没有排序,我们现在能保证的是 相同字母之间x个数为0或者3 不同字母之间x个数为1或者2 由上述两条我们将串收敛一下,把相等相邻的聚在一块,然后格式一下彼此之间距离 此时出现的就是axaaaxaaxa之类的东西,更进一步地,我们将所有长串都收成空串 此时我们要找的是此时里面是不是只有一个a 看到a就return肯定不行,但是我们能先把多个a存在的删掉,其格式一定为axaxa之类,因为我们上述操作不相同的单字符串串之间一定有一个x阻隔 这时候就有只剩下a的情况了,此时是我们想要的 剩下的情况就是全是长串,也是我们不想要的 代码123456789b=xxaxc=xaxxxxx= #这之后相邻的同字符的串就是相邻的axx=x #此时不同串之间相差1xaaa=aa aa= #两步除长串axa=(return)falsea=(return)true=(return)false 2.7上升思路排序 做之后还会有效的两两对比 先确定是不是c比d多,再确定是不是b比a多 建议先看下面的两个 实现上面的体现 c比b多则b全部化为d,此时还有c剩余 d比a多则a全消失,d还有剩余 也就是说dc存在的时候其实是(bcc)还有剩,合法性足够强 我或许需要一些更加显然的理解,但是现在没有…以后可能试试 12345678ca=accb=bcba=ab #先排序bc=d #合法情况是adcbd=db #此时d代表的是bcad= #消去abc 此时如果合法一定是dcdc=(return)true=(return)false #其他就都不合法 2.8最多思路 对于这种考虑总体字母的,我们先把他们放在一起,先排序 我们考虑到排序,所以我们只要比较三者的多少,很明显能考虑到两两对比 接下来我们最好看代码讲解 代码12345678910111213ca=accb=bcba=ab #先排序bc=d bd=db #此时d代表的是bcad= #消去abc,接下来剩下的就只有一个或两个字母,一定,而且不是bc,把三种组合罗列一下就是结果,只有一个字母显然是答案ac=ab=a=(return)ab=(return)bc=(return)c 2.9最少思路思路与上面的类似 直接看代码吧 123456789101112ca=accb=bcba=ab #先排序ab=ddb=bddc= #销去了abc,可能剩下ad,ac,bc d=(return)c #d存在说明d比c多,也就是ab组合都比c多ac=(return)b bc=(return)a","categories":[],"tags":[{"name":"A=B","slug":"A-B","permalink":"https://noirzh.github.io/tags/A-B/"}]},{"title":"A=B 第一章题解","slug":"第一章","date":"2023-11-01T13:04:50.000Z","updated":"2023-11-11T08:49:05.676Z","comments":true,"path":"2023/11/01/第一章/","permalink":"https://noirzh.github.io/2023/11/01/%E7%AC%AC%E4%B8%80%E7%AB%A0/","excerpt":"","text":"前言A&#x3D;B语言也较为特殊,可以认为整体是个循环体,但是是每次循环只要能够执行一条命令就去执行,然后就重新回到循环开头 这个性质会在后续不断应用 而且其本质在做的就是字符串替换 1.1 A到B1a=b 1.2 大写123a=Ab=Bc=C 1.3 去重思路显然我们最后要保留的状态是没有连续字母 只需要将重复的几个压成一个就行,不过要注意A&#x3D;B这个语言的特殊性 代码123aa=abb=bcc=c 1.4 去重 2思路同理,这个是把连续的a压没, 这里之所以会有aaa,而不是直接aa=是因为假如只压缩的可能会剩下来:例如aaa会被替换成a ,我们这么做的本质是将多的字母先压成两个,再把这两个消除掉 12aaa=aaaa= 1.5 排序思路研究语言的必经之路,排序,注意到我们现在在做的是替换字符串 我们的目的是希望各个字母都在其应该在的位置,但我们不知道数组下标,怎么样能达成这两个条件呢? 我们需要一个只看相邻的排序算法,也就是冒泡算法,实现起来不难,如下 代码看到了吗,本质就是大的向后挪动,这个在单步运行时候看的更清楚 123ba=abcb=bcca=ac 这个排序在之后会常用到的,当我们只关心字母数量之类的而不关心其位置的时候 1.6 比较思路比较a和b的多少,还记得去重怎么做的吗?把两个相同的数摁在一起消除 这个题也一样,我们把两个不同的字母摁在一起消除,剩下的就是多的字母 值得一提的是压字母存在两个情况 代码1234ab=ba=aa=abb=b","categories":[],"tags":[{"name":"A=B","slug":"A-B","permalink":"https://noirzh.github.io/tags/A-B/"}]},{"title":"题解-英雄的力量","slug":"题解-英雄的力量","date":"2023-07-31T21:51:11.000Z","updated":"2023-11-12T01:54:41.201Z","comments":true,"path":"2023/08/01/题解-英雄的力量/","permalink":"https://noirzh.github.io/2023/08/01/%E9%A2%98%E8%A7%A3-%E8%8B%B1%E9%9B%84%E7%9A%84%E5%8A%9B%E9%87%8F/","excerpt":"","text":"Problem: 2681. 英雄的力量 [TOC] 思路 选取与顺序无关先排序 接下来只要枚举所有子序列的最大值的平方和最小值的乘积之和 注意到只和最大值和最小值有关 解题方法 确定了子序列的最大值之后,我们只需要确定子序列里面各个值最小值出现了几次 也就是确定排序后的$nums[i]$必选且为最大值时,我们假设此时在答案中与除自身之外他的平方相乘的所有值之和为$pre_i$,此时有答案$res_i&#x3D;nums[i]^2*(pre_i+nums[i])$ 不去管$pre_i$现在为多少,我们假设现在要选取的是$nums[i+1]$为最大值,则注意到对于子序列 如果不选$nums[i]$,$pre_i$也会和$nums[i+1]$相乘 如果选取$nums[i]$,对于所有$nums[i]$不是最小值的情况,$pre_i$也会和$nums[i+1]$相乘,而$nums[i]$是最小值的情况只有一个(也就是选取$i$和$i+1$两个) 根据以上的两个推理,我们能够得出$res_{i+1}&#x3D;nums[i+1]^2*(pre_i2+nums[i]+nums[i+1])$,既$pre_{i+1}&#x3D;pre_i2+nums[i]$ $res&#x3D;\\displaystyle\\sum^{n}_{i&#x3D;0} res_i$ 时间复杂度$O(nlogn)$ 空间复杂度$O(1)$ Code12345678910class Solution: def sumOfPower(self, nums: List[int]) -&gt; int: mod=1000000007 nums.sort() pre=0 res=0 for num in nums: res=(res+(pre+num)*(num**2))%mod pre=(pre*2+num)%mod return res 12345678910111213class Solution &#123;public: int sumOfPower(vector&lt;int&gt;&amp; nums) &#123; const int mod=1e9+7; sort(nums.begin(),nums.end()); int res=0,pre=0; for (long num:nums)&#123; res=(res+(num*num%mod)*(pre+num))%mod; pre=(pre*2+num)%mod; &#125; return res; &#125;&#125;;","categories":[],"tags":[{"name":"题解","slug":"题解","permalink":"https://noirzh.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"Python","slug":"Python","permalink":"https://noirzh.github.io/tags/Python/"},{"name":"数学","slug":"数学","permalink":"https://noirzh.github.io/tags/%E6%95%B0%E5%AD%A6/"}]}],"categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://noirzh.github.io/tags/markdown/"},{"name":"A=B","slug":"A-B","permalink":"https://noirzh.github.io/tags/A-B/"},{"name":"题解","slug":"题解","permalink":"https://noirzh.github.io/tags/%E9%A2%98%E8%A7%A3/"},{"name":"Python","slug":"Python","permalink":"https://noirzh.github.io/tags/Python/"},{"name":"数学","slug":"数学","permalink":"https://noirzh.github.io/tags/%E6%95%B0%E5%AD%A6/"}]}